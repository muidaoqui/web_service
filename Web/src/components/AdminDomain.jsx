import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Table,
  Tag,
  Button,
  Space,
  Modal,
  Drawer,
  Form,
  Input,
  Select,
  Switch,
} from "antd";

const { Option } = Select;
const { confirm } = Modal;

function AdminDomain() {
  const [domains, setDomains] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState("");
  const [selectedDomain, setSelectedDomain] = useState(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [filterType, setFilterType] = useState("all");
  const [form] = Form.useForm();
  const { Search } = Input;

  // fetch API
  const fetchDomains = async () => {
    setLoading(true);
    try {
      const res = await axios.get("/api/domains");
      const data = res.data.data || res.data || [];
      setDomains(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("L·ªói khi fetch domains:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDomains();
  }, []);

  // m·ªü form s·ª≠a
  const handleEdit = (domain) => {
    setSelectedDomain(domain);
    form.setFieldsValue(domain);
    setIsDrawerOpen(true);
  };

  // m·ªü form th√™m m·ªõi
  const handleCreateNew = () => {
    setSelectedDomain(null);
    form.resetFields();
    setIsDrawerOpen(true);
  };

  // ƒë√≥ng drawer
  const handleCloseDrawer = () => {
    setIsDrawerOpen(false);
    setSelectedDomain(null);
  };

  // submit form
  const handleSubmit = async (values) => {
    try {
      if (selectedDomain) {
        await axios.put(`/api/domains/${selectedDomain._id}`, values);
      } else {
        await axios.post("/api/domains", values);
      }
      fetchDomains();
      setIsDrawerOpen(false);
    } catch (err) {
      console.error("L·ªói khi l∆∞u domain:", err);
    }
  };

  // x√≥a
  const handleDelete = (domain) => {
    confirm({
      title: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a domain n√†y?",
      content: domain.name,
      okText: "X√≥a",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: async () => {
        try {
          await axios.delete(`/api/domains/${domain._id}`);
          fetchDomains();
        } catch (err) {
          console.error("L·ªói khi x√≥a domain:", err);
        }
      },
    });
  };

  // l·ªçc d·ªØ li·ªáu theo type
  const filteredDomains =
    filterType === "all"
      ? domains
      : domains.filter((d) => d.type === filterType);

  // c·∫•u h√¨nh c·ªôt Table
  const columns = [
    {
      title: "T√™n mi·ªÅn",
      dataIndex: "name",
      key: "name",
    },
    {
      title: "ƒê∆°n gi√°",
      dataIndex: "newPrice",
      key: "newPrice",
    },
    {
      title: "Gia h·∫°n",
      dataIndex: "renewPrice",
      key: "renewPrice",
    },
    {
      title: "Lo·∫°i",
      dataIndex: "type",
      key: "type",
      render: (t) => <Tag color="blue">{t}</Tag>,
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "isDeleted",
      key: "isDeleted",
      render: (isDeleted) =>
        isDeleted ? (
          <Tag color="red">ƒê√£ x√≥a</Tag>
        ) : (
          <Tag color="green">Ho·∫°t ƒë·ªông</Tag>
        ),
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button type="link" onClick={() => handleEdit(record)}>
            ‚úèÔ∏è S·ª≠a
          </Button>
          <Button danger type="link" onClick={() => handleDelete(record)}>
            üóëÔ∏è X√≥a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="min-h-screen text-white p-4 bg-black shadow rounded-2xl mt-4">
      <h1 className="text-3xl font-bold text-center mb-8">Admin Domain</h1>

      {/* Thanh action */}
      <div className="flex justify-between mb-4">
        <Space>
          <Select
            value={filterType}
            onChange={setFilterType}
            style={{ width: 160 }}
          >
            <Option value="all">-- T·∫•t c·∫£ lo·∫°i --</Option>
            <Option value="qt">Qu·ªëc t·∫ø</Option>
            <Option value="vn">.VN</Option>
            <Option value="khac">Kh√°c</Option>
          </Select>
          <Search
            placeholder="T√¨m theo t√™n g√≥i..."
            allowClear
            onSearch={(value) => setSearch(value)}
            onChange={(e) => setSearch(e.target.value)}
            style={{ width: 250 }}
          />
          
        </Space>

        <Space>
          <Button type="primary" onClick={handleCreateNew}>
            ‚ûï T·∫°o m·ªõi
          </Button>
          <Button>üì• Import</Button>
          <Button>üì§ Export</Button>
        </Space>
      </div>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <Table
        columns={columns}
        dataSource={filteredDomains}
        rowKey="_id"
        loading={loading}
        pagination={{ pageSize: 5 }}
      />

      {/* Drawer Form */}
      <Drawer
        title={selectedDomain ? "Ch·ªânh s·ª≠a Domain" : "T·∫°o m·ªõi Domain"}
        width={480}
        onClose={handleCloseDrawer}
        open={isDrawerOpen}
        bodyStyle={{ paddingBottom: 80 }}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{ isDeleted: false }}
        >
          <Form.Item
            name="name"
            label="T√™n mi·ªÅn"
            rules={[{ required: true, message: "Nh·∫≠p t√™n mi·ªÅn" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="newPrice"
            label="ƒê∆°n gi√°"
            rules={[{ required: true, message: "Nh·∫≠p ƒë∆°n gi√°" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="renewPrice"
            label="Gia h·∫°n"
            rules={[{ required: true, message: "Nh·∫≠p gi√° gia h·∫°n" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item name="type" label="Lo·∫°i">
            <Select placeholder="Ch·ªçn lo·∫°i domain">
              <Option value="qt">Qu·ªëc t·∫ø</Option>
              <Option value="vn">.VN</Option>
              <Option value="khac">Kh√°c</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="isDeleted"
            label="Tr·∫°ng th√°i"
            valuePropName="checked"
          >
            <Switch
              checkedChildren="Ho·∫°t ƒë·ªông"
              unCheckedChildren="ƒê√£ x√≥a"
            />
          </Form.Item>

          <div className="flex justify-end gap-2">
            <Button onClick={handleCloseDrawer}>H·ªßy</Button>
            <Button type="primary" htmlType="submit">
              L∆∞u
            </Button>
          </div>
        </Form>
      </Drawer>
    </div>
  );
}

export default AdminDomain;
